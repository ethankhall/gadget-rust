//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "external_user"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub user_id: i32,
    pub prefered_name: String,
    pub external_user_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    UserId,
    PreferedName,
    ExternalUserId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    UserId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    GlobalRedirects,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::UserId => ColumnType::Integer.def(),
            Self::PreferedName => ColumnType::String(Some(512u32)).def(),
            Self::ExternalUserId => ColumnType::String(Some(512u32)).def().unique(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::GlobalRedirects => Entity::has_many(super::global_redirects::Entity).into(),
        }
    }
}

impl Related<super::global_redirects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GlobalRedirects.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
